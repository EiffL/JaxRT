name: Performance Benchmarks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
# Only run on PRs that modify core algorithms
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install matplotlib  # For benchmark plots
        
    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import numpy as np
        import jax.numpy as jnp
        from jaxrt.core.born_convergence import born_convergence_from_cosmology
        from jaxrt.planes.density_plane import create_density_planes_sequence
        from jaxrt.maps.convergence_map import create_ray_grid
        
        print('Running JaxRT performance benchmarks...')
        
        # Test parameters
        resolutions = [64, 128, 256]
        n_planes = 10
        
        for res in resolutions:
            print(f'\\nBenchmarking resolution {res}x{res}:')
            
            # Generate test data
            map_size_rad = 0.1
            density_planes, redshifts = create_density_planes_sequence(
                n_planes=n_planes,
                redshift_range=(0.1, 2.0),
                resolution=res,
                map_size_rad=map_size_rad,
                power_spectrum_amplitude=1e-4,
                random_seed=42
            )
            
            ray_positions = create_ray_grid(res, map_size_rad)
            
            # Warm up JIT
            _ = born_convergence_from_cosmology(
                ray_positions=ray_positions,
                density_planes=list(density_planes[:2]),
                plane_redshifts=redshifts[:2],
                source_redshift=2.0,
                map_size_rad=map_size_rad,
                map_resolution=res
            )
            
            # Benchmark
            start_time = time.time()
            convergence = born_convergence_from_cosmology(
                ray_positions=ray_positions,
                density_planes=list(density_planes),
                plane_redshifts=redshifts,
                source_redshift=2.0,
                map_size_rad=map_size_rad,
                map_resolution=res
            )
            end_time = time.time()
            
            n_rays = res * res
            time_per_ray = (end_time - start_time) / n_rays * 1e6  # microseconds
            
            print(f'  Time: {end_time - start_time:.3f}s')
            print(f'  Rays: {n_rays:,}')
            print(f'  Time per ray: {time_per_ray:.2f} μs')
            print(f'  Convergence RMS: {jnp.sqrt(jnp.mean(convergence**2)):.6f}')
        
        print('\\n✓ Benchmark completed successfully')
        "
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark_*.png
          benchmark_*.txt
      if-no-files-found: ignore